Shader{
	name = "cc.hsl.shl",
	description = [[ Hue, Saturation, Luminance ]],
	language = "GLSL",
	
	parameters = {
		Parameter{
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",
	
	[[

varying vec2 texcoord0;

void main (void) {
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",

	[[

varying vec2 texcoord0;
uniform sampler2D tex0;

void main (void) {   
	vec4 color = texture2D(tex0, texcoord0);

	float h=0.;
	float s=0.;
	float v=0.;
	
	float colorMax = max(color.r, color.g);
	colorMax = max (colorMax, color.b);
	float colorMin = min(color.r, color.g);
	colorMin = min(colorMin, color.b);
	
	v = colorMax;               // this is the result
	
	//HSV-Saturation  of Texture
	if (colorMax != 0.)
	{ s = (colorMax - colorMin) / colorMax; }
	
	//HSV-Hue  of Texture
	if (s != 0.) // if not achromatic
	{
		float delta = colorMax - colorMin;
		if (color.r == colorMax){ h = (color.g-color.b)/delta; }
		else if (color.g == colorMax){  h = 2.0 + (color.b-color.r) / delta; }
		else { h = 4.0 + (color.r-color.g)/delta; }
		h *= 60.;
		if( h < 0.){ h += 360.; }
		h = h / 360.0;    // moving h to be between 0 and 1.
	}
	
	gl_FragColor = vec4(h, s, v, 1.);
}

	]],
},

--------------------------------------------------------------------------
}