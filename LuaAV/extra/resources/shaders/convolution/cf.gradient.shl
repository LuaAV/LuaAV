Shader
{
	name = "cf.gradient.shl",
	description = [[ Calculates the gradient of an image ]],
	language = "GLSL",
	
	parameters = {
		Parameter {
			{1, 1, 1, 1},
			name = "scale", type = "vec4",
			description = "scale factor for samples",
		},
		
		Parameter {
			0,
			name = "image", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program {
	type = "vertex",
	
	[[

varying vec2 texcoord0;

void main() {
	gl_Position = ftransform();
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program {
	type = "fragment",

	[[

uniform sampler2D image;
uniform vec4 scale;

varying vec2 texcoord0;

void main() {
	vec4 c = texture2D(image, texcoord0);
	vec4 cx = texture2D(image, texcoord0 + vec2(1., 0.));
	vec4 cy = texture2D(image, texcoord0 + vec2(0., 1.));
	
	float v = dot(c, scale);
	float vx = dot(cx, scale);
	float vy = dot(cy, scale);
	
	float vv1 = vx - v;
	float vv2 = vy - v;
	
	gl_FragColor = vec4(vv1, vv2, 0., 1.)*10.;
}

	]],
},

--------------------------------------------------------------------------
}