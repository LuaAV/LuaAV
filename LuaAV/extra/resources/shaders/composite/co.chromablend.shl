Shader
{
	name = "co.chromablend.shl",
	description = [[ Alpha masking chroma shader ]],
	language = "GLSL",
	
	parameters =
	{
		Parameter{
			0.3,
			name = "tol", type = "float", 
			description =  "tolerance",
		},
		
		Parameter{
			0.,
			name = "fade", type = "float", 
			description =  "fade",
		},
		
		Parameter{
			{0., 0., 0., 0.},
			name = "color", type = "vec4", 
			description =  "key color",
		},
		
		Parameter{
			0.,
			name = "invert", type = "float", 
			description =  "invert mask",
		},
		
		Parameter{
			0.,
			name = "mask", type = "float", 
			description =  "???",
		},
		
		Parameter{
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program
{
	type = "vertex",
	
	[[

varying vec2 texcoord0;

void main (void)
{
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program
{
	type = "fragment",

	[[

// texcoords
varying vec2 texcoord0;

// samplers
uniform sampler2D tex0;

// blend amount
uniform vec4 color;
uniform float tol;
uniform float fade;
uniform float invert;
uniform float mode;
//uniform float binary;

// entry point
void main()
{   
	vec4 one_third = vec4(0.333333);

	vec4 a = texture2D(tex0, texcoord0);
	vec4 source = a;
	vec4 target = color;

//	vec4 b = color;

	// zero our alphas
	source.a = 0.;
	target.a = 0.;	

	// measure distance from target
	vec4 vdelta = abs(source-target);
	
	// sum vector distance, scaling by a third
	float delta = dot(vdelta,one_third); 
	
	// determine scaling coefficient witin our fade range
	float scale = smoothstep(abs(tol),abs(tol)+abs(fade),delta);

	// invert if necessary
	float mixamount = mix(scale,1.-scale,invert);

	// blend between sources based on mixamount	
//	vec4 result = mix(b,a,vec4(mixamount));

	// if not binary just set alpha value
	a.a = 1.-mixamount;

	gl_FragColor = a;	
	// result either blend or mask based on mode
//	gl_FragColor = mix(result,vec4(mixamount),vec4(mode));
	
//	gl_FragColor = vec4(vec3(mixamount), 1.);
}

	]],
},

--------------------------------------------------------------------------
}