Shader{
	name = "td.plane3d.shl",
	description = [[ Samples a 3D matrix by cutting through it with a plane ]],
	language = "GLSL",
	
	parameters = {
		Parameter{
			0.,
			name = "offset", type = "float", 
			description =  "offset along Z into buffer",
		},
		
		Parameter{
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",
	
	[[

varying vec2 texcoord0;

void main()
{
	gl_Position = ftransform();
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",

	[[

varying vec2 texcoord0;
uniform sampler3D tex0;

uniform float offset;

void main()
{
	float z = mod(offset+texcoord0.y, 1.);
	vec4 color = texture3D(tex0, vec3(texcoord0, z));
    gl_FragColor = color;
}

	]],
},

--------------------------------------------------------------------------
}