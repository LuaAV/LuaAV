Shader
{
	name = "raycast.shl",
	description = [[ raycast shader ]],
	language = "GLSL",
	
	parameters =
	{
		Parameter
		{
			1.,
			name = "stepsize", type = "float", 
			description =  "step size",
		},
		
		Parameter
		{
			1,
			name = "volTex", type = "INT", 
			description =  "3D texture data",
		},
		
		Parameter
		{
			0,
			name = "backface", type = "INT", 
			description =  "back position texture",
		},
    },

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program
{
	type = "vertex",
	
	[[

varying vec4 Pos;
varying vec4 TexCoord; 


void main (void)

{
	TexCoord = vec4(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    //TexCoord = gl_MultiTexCoord0;
    Pos = ftransform();
    gl_Position = ftransform();

}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program
{
	type = "fragment",	--must be defined

	[[
 
uniform sampler2D backface; 
uniform sampler3D volTex;
uniform float stepsize;

varying vec4 Pos;
varying vec4 TexCoord; 


void main (void)
{
  vec2 texc = ((Pos.xy / Pos.w) + 1.0) / 2.0; // find the right place to lookup in the backside buffer
  vec4 start = TexCoord; // the start position of the ray is stored in the texturecoordinate
  vec4 back_position  = texture2D(backface, texc);
  
  vec3 dir = back_position.xyz - start.xyz;
  
  float len = length(dir.xyz); // the length from front to back is calculated and used to terminate the ray
  vec3 norm_dir = normalize(dir);
  float delta = stepsize;
  vec3 delta_dir = norm_dir * delta;
  float delta_dir_len = length(delta_dir);
  vec3 vec = start.xyz;
  vec4 col_acc = vec4(0.,0.,0.,0.);
  float alpha_acc = 0.0;
  float length_acc = 0.0;
  vec4 color_sample;
  float alpha_sample;
  
  

    for(int i = 0; i < 50; i++)
    {
      color_sample = texture3D(volTex,vec);
      
      //col_acc   += (1.0 - alpha_acc) * color_sample * alpha_sample * 3.0;
      col_acc   += (1.0 - alpha_acc) * color_sample * alpha_sample * 3.0;
      alpha_sample = color_sample.a * stepsize;
      alpha_acc += alpha_sample;
           
      vec += delta_dir;
            
      length_acc += delta_dir_len;
      if(length_acc >= len || alpha_acc > 1.0){
      	 break; // terminate if opacity > 1 or the ray is outside the volume
      }
    }
    
    
  gl_FragColor =  col_acc * 20.0;
  
  
  
}

	]],
},

--------------------------------------------------------------------------
}