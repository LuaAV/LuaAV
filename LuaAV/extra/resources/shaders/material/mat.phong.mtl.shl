Shader{
	name = "mat.phong.shl",
	description = [[ per-pixel lighting model ]],
	language = "GLSL",
	
	parameters = {},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",
	
	[[

varying vec3 P;
varying vec3 N;

void main (void) {
	//get the vertices into eye space
	P = (gl_ModelViewMatrix*gl_Vertex).xyz;

	//get the normals into eye space
	N = gl_NormalMatrix*normalize(gl_Normal);
	
	gl_Position = ftransform();
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",

	[[

varying vec3 P;
varying vec3 N;

void main (void) {
	vec3 Nn = normalize(N);
	
	vec3 lightPosition = vec3(gl_LightSource[0].position);
	
	
	vec4 ambient = gl_FrontMaterial.ambient*gl_LightSource[0].ambient;
	
	vec3 L = normalize(lightPosition - P);
	vec4 diffuse = gl_FrontMaterial.diffuse*gl_LightSource[0].diffuse*max(dot(Nn, L), 0.);
	
	vec3 V = normalize(-P);
	vec3 H = normalize(L + V); 
	vec4 specular = gl_FrontMaterial.specular*gl_LightSource[0].specular * pow(max(dot(Nn,H), 0.), gl_FrontMaterial.shininess);
	
	gl_FragColor = gl_FrontMaterial.emission + ambient + diffuse + specular;
}

	]],
},

--------------------------------------------------------------------------
}