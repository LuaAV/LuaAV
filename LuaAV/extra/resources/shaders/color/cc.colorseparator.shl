Shader
{
	name = "cc.brcosa.shl",
	description = [[ BRightness / COntrast / SAturation shader ]],
	language = "GLSL",
	
	parameters =
	{
		Parameter{
			{0., 0.},
			name = "redoffset", type = "vec2", 
			description =  "base luminance value",
		},
		
		Parameter{
			{0., 0.},
			name = "greenoffset", type = "vec2", 
			description =  "base luminance value",
		},
		
		Parameter{
			{0., 0.},
			name = "blueoffset", type = "vec2", 
			description =  "base luminance value",
		},
		
		Parameter{
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program
{
	type = "vertex",
	
	[[

varying vec2 texcoord0;

void main() {
    // perform standard transform on vertex
    gl_Position = ftransform();

    // transform texcoords
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program
{
	type = "fragment",

	[[

uniform vec2 redoffset;
uniform vec2 greenoffset;
uniform vec2 blueoffset;

// define our rectangular texture samplers 
uniform sampler2D tex0;

// define our varying texture coordinates 
varying vec2 texcoord0;

//vec4 lumcoeff = vec4(0.2125,0.7154,0.0721,0.0);
//vec4 two = vec4(2.0);
//vec4 one = vec4(1.0);

void main (void) 
{ 		
	vec2 redzoomtvec = mod((texcoord0) + redoffset, 1.0);
	vec2 greezoomvec = mod((texcoord0) + greenoffset, 1.0);
	vec2 bluezoomvec = mod((texcoord0) + blueoffset, 1.0);

	
	vec4 input0 = texture2D(tex0, texcoord0);
	
	vec4 redinput0 = texture2D(tex0, redzoomtvec);
	vec4 greeninput0 = texture2D(tex0, greezoomvec);
	vec4 blueinput0 = texture2D(tex0, bluezoomvec);
	
	
	vec4 result1 = vec4( redinput0.r , greeninput0.g, blueinput0.b, input0.a);


	// mix with original input0 ? :X:X:X
	//vec4 result = brightlight(input0, result1, mixamount);
	
	gl_FragColor = result1;
} 




	]],
},

--------------------------------------------------------------------------
}