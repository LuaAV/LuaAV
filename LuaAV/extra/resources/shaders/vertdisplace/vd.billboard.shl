Shader{
	name = "vd.billboard.shl",
	description = [[ Make a quad into a screen-aligned billboard ]],
	language = "GLSL",
	
	--[[
		This shader takes in vertices of the form
		
		(-1, 1, 0) -------> (1, 1, 0)
			^					|
			|					|		
			|		  (x)		|
			|					|
			|					V
		(-1, -1, 0) <------ (1, -1, 0)
		
		which it uses to scale vectors from the ModelView matrix to 
		form a screen-aligned billboard
		
		Put the center '(x)' of the quad in the vertex
	--]]
	
	parameters = {
		Attribute{
			name = "offset", type = "vec3",
			description = "offset from vertex"
		},
	
		Parameter{
			1,
			name = "scale", type = "float",
			description = "size of the quad",
		},
		
		Parameter{
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",

[[

attribute vec3 offset;
uniform float scale;

varying vec2 texcoord0;
varying vec2 test;

void main() {
	//screen-aligned axes
	vec3 axis1 = vec3(	gl_ModelViewMatrix[0][0], 
						gl_ModelViewMatrix[1][0],
						gl_ModelViewMatrix[2][0]);
						
	vec3 axis2 = vec3(	gl_ModelViewMatrix[0][1], 
						gl_ModelViewMatrix[1][1],
						gl_ModelViewMatrix[2][1]);


	//offset from center point
	vec3 corner = (offset.x*axis1 + offset.y*axis2)*scale + gl_Vertex.xyz;
	
	test.xy = offset.xy;
	
	// position in eye space
	gl_Position = gl_ModelViewProjectionMatrix * vec4(corner, 1.);

	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	gl_FrontColor = gl_Color;
}
]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",
[[

uniform sampler2D tex0;
varying vec2 texcoord0;
varying vec2 test;

void main() {
	vec4 c1 = texture2D(tex0, texcoord0);
	gl_FragColor = c1*gl_Color;
}
]],
},

--------------------------------------------------------------------------
}