Shader{
	name = "vol.test.shl",
	description = [[ Volume rendering test shader ]],
	language = "GLSL",
	
	parameters =
	{
		Parameter {
			1.,
			name = "scale", type = "float",
			description = "output scale",
		},
	
		Parameter {
			0,
			name = "front", type = "int",
			description = "Front faces texture",
		},
		
		Parameter {
			1,
			name = "back", type = "int",
			description = "back faces texture",
		},
		
		Parameter {
			2,
			name = "volume", type = "int",
			description = "volume density data",
		},
		Parameter {
			3,
			name = "transfer", type = "int",
			description = "transfer function 1d",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",
	
	[[

varying vec4 ftpos;
varying vec3 look_dir;

void main() {
	ftpos = ftransform();
	gl_Position = ftpos;
	vec4 viewVec = vec4(0.0, 0.0, -1.0, 0.0);
	look_dir = (gl_ModelViewMatrixInverseTranspose * viewVec).xyz;
	
	look_dir= abs(look_dir);
	
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",	--must be defined

	[[

varying vec4 ftpos;


uniform sampler2D front;
uniform sampler2D back;
uniform sampler3D volume;
uniform sampler1D transfer;

varying vec3 look_dir;

const float ds = 0.02;


void main() {
	vec2 texcoord = 0.5*((ftpos.xy/ftpos.w)+1.);

	vec4 fpos = texture2D(front, texcoord);
	vec4 bpos = texture2D(back, texcoord);

	vec3 dir = bpos.xyz - fpos.xyz;
	vec3 absDir;
	absDir = abs(dir);
	
	
	float testDir = dot(absDir, look_dir);
	if(testDir < 0.0){
		gl_FragColor = vec4(1.0, 0.0, 0.0, 0.0);
		
	}
	
	else{
	
		vec3 vstep = normalize(dir)*ds;
		vec3 vpos = fpos.xyz;
		vec4 col_acc = vec4(0.,0.,0.,0.);
		float len = length(dir);
		float lenaccum = 0.;
		float alpha_acc = 0.0;
	 
		vec4 color_sample;
		float alpha_sample;
		
		for(int i=0; i < 450; i++) {
		    if(length(vpos)== 0.0){
		    	break;
		    }
			float val = texture3D(volume, vpos).r;
			color_sample = texture1D(transfer, val);
			alpha_sample = color_sample.a * ds;
	      
	        col_acc  += (1.0 - alpha_acc) * color_sample * alpha_sample;
	      
			//valaccum += val;
			vpos += vstep;
			lenaccum += ds;
			alpha_acc += alpha_sample;
			
			if(lenaccum > len) break;
		}
		
		
		
		gl_FragColor = col_acc*10.0;
		//gl_FragColor = vec4(dir, 1.0);
	}
	

}

	]],
},

--------------------------------------------------------------------------
}