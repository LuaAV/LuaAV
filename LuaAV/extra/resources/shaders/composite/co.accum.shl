Shader
{
	name = "co.accum.shl",
	description = [[ Feedback accumulation shader ]],
	language = "GLSL",
	
	parameters =
	{
		Parameter {
			1,
			name = "inscale", type = "float", 
			description =  "input scale (tex0)",
		},
		
		Parameter {
			{0, 0, 0, 0.1},
			name = "erase_color", type = "vec4", 
			description =  "Feedback erase color",
		},
		
		Parameter {
			0,
			name = "tex0", type = "int",
			description = "Input texture",
		},
		
		Parameter {
			1,
			name = "tex1", type = "int",
			description = "Feedback texture",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program
{
	type = "vertex",
	
	[[

varying vec2 texcoord0;
varying vec2 texcoord1;

void main (void)
{
    gl_Position = ftransform();
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program
{
	type = "fragment",

	[[

uniform float inscale;

// texcoords
varying vec2 texcoord0;
varying vec2 texcoord1;

// samplers
uniform sampler2D tex0;
uniform sampler2D tex1;

// accum amount
uniform vec4 erase_color;

const float eps = 0.012;

// entry point
void main() {
	vec4 current = texture2D(tex0, texcoord0)*inscale;
	vec4 previous = texture2D(tex1, texcoord1);

	//simulation of jit.gl.render's @erase_color attribute
	vec4 framebuffer = mix(previous, erase_color, erase_color.a);

// if not using float textrures, this may be useful
//	framebuffer = (framebuffer.r < eps) ? vec4(0., 0., 0., 0.) : framebuffer;

	gl_FragColor = framebuffer + current;
}

	]],
},

--------------------------------------------------------------------------
}