Shader {
	name = "gm.normal.shl",
	description = [[ Normal visualization shader ]],
	language = "GLSL",
	
	parameters = {
		Parameter {
			{1., 0., 0., 1.},
			name = "c1", type = "vec4", 
			description =  "Color value at vertex",
		},
		
		Parameter {
			{0., 0., 1., 1.},
			name = "c2", type = "vec4", 
			description =  "Color value at normal tip",
		},
		
		Parameter {
			1.,
			name = "scale", type = "float", 
			description =  "Scale of normals",
		},
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program {
	type = "vertex",
	
	[[

#version 120

varying vec4 P;
varying vec3 N;

void main(void) {
	//get the vertices into eye space
	P = gl_ModelViewMatrix*gl_Vertex;
	
	//just send the things as they are
	gl_Position = gl_Vertex;
	gl_FrontColor = gl_Color;
	
	//get normals into eye space
	N = gl_NormalMatrix*gl_Normal;
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Geometry Program
--------------------------------------------------------------------------
Program {
	type = "geometry",
	vertices_out = 6,
	input_type = "triangles",
	output_type = "line_strip",
	
	[[

#version 120
#extension GL_EXT_geometry_shader4 : enable

uniform float scale;
uniform vec4 c1;
uniform vec4 c2;

varying in vec4 P[3];
varying in vec3 N[3];


vec4 add_normal(vec4 p, vec3 n) {
	vec4 t = p;
	t.xyz += n.xyz*scale;
	return t;
}


void main(void)
{
//--------------------------------------------------------------------------
	gl_FrontColor = c1;
	gl_Position = gl_ProjectionMatrix*P[0];
	EmitVertex();
	
	gl_FrontColor = c2;
	gl_Position = gl_ProjectionMatrix*add_normal(P[0], N[0]);
	EmitVertex();	
		EndPrimitive();
//--------------------------------------------------------------------------
	gl_FrontColor = c1;
	gl_Position = gl_ProjectionMatrix*P[1];
	EmitVertex();
	
	gl_FrontColor = c2;
	gl_Position = gl_ProjectionMatrix*add_normal(P[1], N[1]);
	EmitVertex();	
		EndPrimitive();
//--------------------------------------------------------------------------		
	gl_FrontColor = c1;
	gl_Position = gl_ProjectionMatrix*P[2];
	EmitVertex();
	
	gl_FrontColor = c2;
	gl_Position = gl_ProjectionMatrix*add_normal(P[2], N[2]);
	EmitVertex();	
		EndPrimitive();
//--------------------------------------------------------------------------
}

	]],
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program {
	type = "fragment",

	[[

#version 120

void main (void) {
	gl_FragColor = gl_Color;
}

	]],
},

--------------------------------------------------------------------------
}